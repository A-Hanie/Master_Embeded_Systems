
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_2>
   c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
//#define MCRCR *(vuint8_t * )0x55


void GPIO_init(void)
{
	CLR_BIT(DDRB,PB2);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRD,PD3);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PD5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PD6);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 64       	ori	r24, 0x40	; 64
  82:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PD7);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 68       	ori	r24, 0x80	; 128
  88:	81 bb       	out	0x11, r24	; 17
  8a:	08 95       	ret

0000008c <EXTI_init>:
	External Interrupt 0 (INT0) - PD2. >> irq occur when “any logical change”
	External Interrupt 1 (INT1) - PD3. >> irq occur when “rising edge”
	External Interrupt 2 (INT2) - PB2. >> irq occur when “Falling edge”
	*/
	// INT0
	SET_BIT(MCUCR,ISC00);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 bf       	out	0x35, r24	; 53
	CLR_BIT(MCUCR,ISC01);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	85 bf       	out	0x35, r24	; 53
	// INT1
	SET_BIT(MCUCR,ISC11);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC10);	
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	85 bf       	out	0x35, r24	; 53
	// INT2
	CLR_BIT(MCUCSR,ISC2);
  a4:	84 b7       	in	r24, 0x34	; 52
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	84 bf       	out	0x34, r24	; 52
	
	// Enable External Interrupt
	SET_BIT(GICR,INT1);
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT0);
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT2);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8b bf       	out	0x3b, r24	; 59
	// Enable Global Interrupt
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <main>:
 

int main(void)
{

	GPIO_init();
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	EXTI_init();
  c4:	0e 94 46 00 	call	0x8c	; 0x8c <EXTI_init>
    while (1) 
    {
		CLR_BIT(PORTD,PINA7);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	82 bb       	out	0x12, r24	; 18
		CLR_BIT(PORTD,PINA6);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7b       	andi	r24, 0xBF	; 191
  d2:	82 bb       	out	0x12, r24	; 18
		CLR_BIT(PORTD,PINA5);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	82 bb       	out	0x12, r24	; 18
  da:	f6 cf       	rjmp	.-20     	; 0xc8 <main+0x8>

000000dc <__vector_1>:
    }
}

ISR(INT0_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	SET_BIT(PORTD,PD5);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_1+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_1+0x26>
 102:	00 00       	nop
	_delay_ms(1000);
	CLR_BIT(PORTD,PD5);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	82 bb       	out	0x12, r24	; 18
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_2>:

ISR(INT1_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	SET_BIT(PORTD,PD6);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	82 bb       	out	0x12, r24	; 18
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__vector_2+0x1c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_2+0x26>
 140:	00 00       	nop
	_delay_ms(1000);
	CLR_BIT(PORTD,PD6);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8f 7b       	andi	r24, 0xBF	; 191
 146:	82 bb       	out	0x12, r24	; 18
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_3>:

ISR(INT2_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	SET_BIT(PORTD,PD7);
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	83 ed       	ldi	r24, 0xD3	; 211
 172:	90 e3       	ldi	r25, 0x30	; 48
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <__vector_3+0x1c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <__vector_3+0x26>
 17e:	00 00       	nop
	_delay_ms(1000);
	CLR_BIT(PORTD,PD7);
 180:	82 b3       	in	r24, 0x12	; 18
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	82 bb       	out	0x12, r24	; 18
}
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
